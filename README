ION-Seeder
==============

Ion-seeder is a crawler for the ionomy network, which exposes a list
of reliable nodes via a built-in DNS server.

Features:
* regularly revisits known nodes to check their availability
* bans nodes after enough failures, or bad behaviour
* accepts nodes down to v0.3.19 to request new IP addresses from,
  but only reports good post-v0.3.24 nodes.
* keeps statistics over (exponential) windows of 2 hours, 8 hours,
  1 day and 1 week, to base decisions on.
* very low memory (a few tens of megabytes) and cpu requirements.
* crawlers run in parallel (by default 24 threads simultaneously).

REQUIREMENTS
------------

$ sudo apt-get install build-essential libboost-all-dev libssl-dev

USAGE
-----

Assuming you want to run a dns seed on dnsseed.example.com, you will
need an authorative NS record in example.com's domain record, pointing
to for example vps.example.com:

$ dig -t NS dnsseed.example.com

;; ANSWER SECTION
dnsseed.example.com.   86400    IN      NS     vps.example.com.

On the system vps.example.com, you can now run dnsseed:

./dnsseed -h dnsseed.example.com -n vps.example.com

If you want the DNS server to report SOA records, please provide an
e-mail address (with the @ part replaced by .) using -m.

ADAPTING TO CHAIN PARAMETERS
-----

The seeder needs to know where to start looking for seeds, and it needs 
know the criteria for accepting or rejecting clients.

The relevant settings are located in:
* main.cpp:400
Add a list of initial known nodes
static const string mainnet_seeds[] = {"45.32.90.59", "108.61.171.118", "51.15.37.54", "73.52.28.242", "45.32.68.232", "163.172.42.67", "45.63.9.73", ""};
static const string testnet_seeds[] = {"69.178.110.19", "51.15.49.25", "185.107.224.197", "212.114.110.152", "45.76.113.100", ""}; 

* main.cpp:461
Update the magic number to the number defined in the coin's chainparams.cpp

* dh.h:15 
update the minimum version number for clients to accept
#define REQUIRE_VERSION 95610

* protocol.cpp:25
Update the magic number to the number defined in the coin's chainparams.cpp
unsigned char pchMessageStart[4] = { 0xc4, 0xe1, 0xd8, 0xec };

* protocol.h:21
Update the default port number for mainnet and testnet
  return testnet ? 27170 : 12700;

* serialise.h:63
Update the protocol version that the seeder itself published
static const int PROTOCOL_VERSION = 95610;


COMPILING
---------
Compiling will require boost and ssl.  On debian systems, these are provided
by `libboost-dev` and `libssl-dev` respectively.

$ make

This will produce the `dnsseed` binary.


RUNNING AS NON-ROOT
-------------------

Typically, you'll need root privileges to listen to port 53 (name service).

One solution is using an iptables rule (Linux only) to redirect it to
a non-privileged port:

$ iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-port 5353

If properly configured, this will allow you to run dnsseed in userspace, using
the -p 5353 option.
